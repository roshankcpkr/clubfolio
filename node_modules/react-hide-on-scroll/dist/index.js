function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = _interopDefault(require('react'));

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  subClass.__proto__ = superClass;
}

var getOffset = function getOffset(el) {
  var rect = el === null || el === void 0 ? void 0 : el.getBoundingClientRect(),
      scrollTop = window.pageYOffset || document.documentElement.scrollTop;
  return rect.top + scrollTop;
};

var HideBetween = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(HideBetween, _React$Component);

  function HideBetween() {
    var _this;

    _this = _React$Component.apply(this, arguments) || this;
    _this.state = {
      show: false
    };

    _this.listenToScroll = function () {
      var _this$props = _this.props,
          startDivID = _this$props.startDivID,
          endDivID = _this$props.endDivID,
          startHeight = _this$props.startHeight,
          endHeight = _this$props.endHeight,
          height = _this$props.height,
          inverse = _this$props.inverse,
          startDivOffset = _this$props.startDivOffset,
          endDivOffset = _this$props.endDivOffset;
      var startDiv = null,
          endDiv = null;

      if (!height) {
        startDiv = document.querySelector("#" + startDivID);
        endDiv = document.querySelector("#" + endDivID);
      }

      var startDivTopOffset = height ? startHeight || 0 : getOffset(startDiv);
      var endDivTopOffset = height ? endHeight || 0 : getOffset(endDiv);

      if (!height) {
        if (startDivOffset) startDivTopOffset += startDivOffset;else if (endDivOffset) endDivTopOffset += endDivOffset;
      }

      var winScroll = document.body.scrollTop || document.documentElement.scrollTop;

      if (winScroll >= startDivTopOffset && winScroll <= endDivTopOffset) {
        _this.setState({
          show: inverse
        });
      } else {
        _this.setState({
          show: !inverse
        });
      }
    };

    return _this;
  }

  var _proto = HideBetween.prototype;

  _proto.componentDidMount = function componentDidMount() {
    window.addEventListener("scroll", this.listenToScroll);
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    window.removeEventListener("scroll", this.listenToScroll);
  };

  _proto.render = function render() {
    return React.createElement(React.Fragment, null, this.state.show && this.props.children);
  };

  return HideBetween;
}(React.Component);

var HideOn = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(HideOn, _React$Component);

  function HideOn() {
    var _this;

    _this = _React$Component.apply(this, arguments) || this;
    _this.state = {
      show: false
    };

    _this.listenToScroll = function () {
      var _this$props = _this.props,
          atHeight = _this$props.atHeight,
          inverse = _this$props.inverse,
          divID = _this$props.divID,
          offset = _this$props.offset,
          height = _this$props.height;
      var div = null;

      if (!atHeight) {
        div = document.querySelector("#" + divID);
      }

      var divTopOffset = height ? height || 0 : getOffset(div);

      if (!height && offset) {
        divTopOffset += offset;
      }

      var winScroll = document.body.scrollTop || document.documentElement.scrollTop;

      if (winScroll >= divTopOffset) {
        _this.setState({
          show: inverse
        });
      } else {
        _this.setState({
          show: !inverse
        });
      }
    };

    return _this;
  }

  var _proto = HideOn.prototype;

  _proto.componentDidMount = function componentDidMount() {
    this.props.showOnPageInit && this.listenToScroll();
    window.addEventListener("scroll", this.listenToScroll);
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    window.removeEventListener("scroll", this.listenToScroll);
  };

  _proto.render = function render() {
    return React.createElement(React.Fragment, null, this.state.show && this.props.children);
  };

  return HideOn;
}(React.Component);

HideOn.defaultProps = {
  showOnPageInit: true
};

var HideScroll = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(HideScroll, _React$Component);

  function HideScroll() {
    var _this;

    _this = _React$Component.apply(this, arguments) || this;
    _this.state = {
      show: HideScroll.defaultProps.showOnPageInit && _this.props.showOnPageInit,
      prevYOffset: window.pageYOffset
    };

    _this.listenToScroll = function () {
      var prevYOffset = _this.state.prevYOffset;
      var variant = _this.props.variant;
      var currentYOffset = window.pageYOffset;

      if (prevYOffset > currentYOffset) {
        _this.setState({
          show: variant === "down",
          prevYOffset: currentYOffset
        });
      } else {
        _this.setState({
          show: variant !== "down",
          prevYOffset: currentYOffset
        });
      }
    };

    return _this;
  }

  var _proto = HideScroll.prototype;

  _proto.componentDidMount = function componentDidMount() {
    window.addEventListener("scroll", this.listenToScroll);
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    window.removeEventListener("scroll", this.listenToScroll);
  };

  _proto.render = function render() {
    return React.createElement(React.Fragment, null, this.state.show && this.props.children);
  };

  return HideScroll;
}(React.Component);

HideScroll.defaultProps = {
  variant: "down",
  showOnPageInit: true
};

var HideDuring = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(HideDuring, _React$Component);

  function HideDuring() {
    var _this;

    _this = _React$Component.apply(this, arguments) || this;
    _this.timeout = null;
    _this.state = {
      show: false
    };

    _this.listenToScroll = function () {
      _this.setState({
        show: !_this.props.inverse
      });

      _this.timeout && clearTimeout(_this.timeout);
      _this.timeout = setTimeout(function () {
        _this.setState({
          show: _this.props.inverse ? true : false
        });
      }, 100);
    };

    return _this;
  }

  var _proto = HideDuring.prototype;

  _proto.componentDidMount = function componentDidMount() {
    window.addEventListener("scroll", this.listenToScroll);
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    window.removeEventListener("scroll", this.listenToScroll);
  };

  _proto.render = function render() {
    return React.createElement(React.Fragment, null, this.state.show && this.props.children);
  };

  return HideDuring;
}(React.Component);

exports.HideBetween = HideBetween;
exports.HideDuring = HideDuring;
exports.HideOn = HideOn;
exports.HideScroll = HideScroll;
//# sourceMappingURL=index.js.map
